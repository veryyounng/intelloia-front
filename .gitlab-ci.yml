stages:
  - build
  - deploy

variables:
  ############ 필수 필드 ############
  HARBOR_URL: "10.10.123.21:8443"
  HARBOR_PROJECT_PATH: "${CI_PROJECT_NAMESPACE}"
  HARBOR_USERNAME: "admin"
  HARBOR_PASSWORD: "itld2022@@"
  SSH_USERNAME: "soyeong"
  SSH_PASSWORD: "young1834"
  DEPLOY_HOST: "10.10.123.30"
  DEPLOY_CONTAINER_NAME: "${CI_PROJECT_PATH_SLUG}"
  DEPLOY_IMAGE_NAME: "$CI_PROJECT_NAME:$CI_COMMIT_SHA"
  DEPLOY_PUBLIC_PATH: "/home/soyeong/intelloia/intelloia_front/dist"
  ############ 선택 필드 ############
  DEPLOY_NETWORK: "dami-talk-network"
  DEPLOY_ENV_PATH: ""
  DEPLOY_OUT_PORT: ""
  DEPLOY_IN_PORT: ""
  DEPLOY_VOLUME_MAPPING: ""
  DEPLOY_ARGS: ""

build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.23.2-debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$HARBOR_URL\":{\"username\":\"$HARBOR_USERNAME\",\"password\":\"$HARBOR_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${HARBOR_URL}/${HARBOR_PROJECT_PATH}/${DEPLOY_IMAGE_NAME}"
      --insecure
      --skip-tls-verify
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - when: never

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh sshpass
    - mkdir -p ~/.ssh
    - ssh-keyscan 10.10.123.21 >> ~/.ssh/known_hosts
  script:
    - ARGS="$DEPLOY_ARGS"

    # 네트워크 옵션
    - if [ -n "$DEPLOY_NETWORK" ]; then
      ARGS="$ARGS --network $DEPLOY_NETWORK";
      fi

    # 환경변수 파일 옵션
    - if [ -n "$DEPLOY_ENV_PATH" ]; then
      ARGS="$ARGS --env-file $DEPLOY_ENV_PATH";
      fi

    # 포트 매핑 옵션
    - if [ -n "$DEPLOY_OUT_PORT" ] && [ -n "$DEPLOY_IN_PORT" ]; then
      ARGS="$ARGS -p $DEPLOY_OUT_PORT:$DEPLOY_IN_PORT";
      fi

    - if [ -n "$DEPLOY_VOLUME_MAPPING" ]; then
      ARGS="$ARGS -v $DEPLOY_VOLUME_MAPPING";
      fi

    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$DEPLOY_HOST "docker pull ${HARBOR_URL}/${HARBOR_PROJECT_PATH}/${DEPLOY_IMAGE_NAME}"
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$DEPLOY_HOST "docker tag ${HARBOR_URL}/${HARBOR_PROJECT_PATH}/${DEPLOY_IMAGE_NAME} ${DEPLOY_CONTAINER_NAME}"
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$DEPLOY_HOST "docker rmi ${HARBOR_URL}/${HARBOR_PROJECT_PATH}/${DEPLOY_IMAGE_NAME}"
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$DEPLOY_HOST "docker rm ${DEPLOY_CONTAINER_NAME}"
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$DEPLOY_HOST "docker create --name ${DEPLOY_CONTAINER_NAME} ${DEPLOY_CONTAINER_NAME}"
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$DEPLOY_HOST "docker cp ${DEPLOY_CONTAINER_NAME}:/public/. ${DEPLOY_PUBLIC_PATH}"
    - sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no $SSH_USERNAME@$DEPLOY_HOST "docker rm ${DEPLOY_CONTAINER_NAME}"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_PIPELINE_SOURCE == "push"'
      when: always
    - when: never
